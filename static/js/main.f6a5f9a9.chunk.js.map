{"version":3,"sources":["context/AppContext.ts","components/PageLoader/HeaderLoaderAnimation.tsx","components/MainLoader/MainLoader.tsx","Pages/AppLoader.tsx","theme/defaultTheme.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppContextDefaultValue","showLoader","loaderAnimationCompleted","headerBreadCrumbs","Map","count","AppContext","createContext","value","HeaderLoaderAnimation","React","loading","setLoading","appContext","loaderBox","document","getElementById","style","width","clearInterval","interval","setInterval","height","w","bgColor","pos","top","left","id","transition","data-testid","MainLoader","MyApp","componentToLoad","fallback","AppLoader","reactLazyLoad","className","minH","maxW","alignItems","justifyContent","defaultTheme","extendTheme","fonts","body","heading","config","initialColorMode","useSystemColorMode","App","Provider","theme","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gMAEaA,EAAyB,CAClCC,YAAY,EACZC,0BAA0B,EAC1BC,kBAAmB,IAAIC,IACvBC,MAAO,GAEEC,EAAaC,wBAAcP,G,sBCApCQ,EAAQ,EACCC,EAAwB,WAA+C,IAAD,EACjDC,YAAe,GADkC,mBACxEC,EADwE,KAC/DC,EAD+D,KAEzEC,EAAaH,aAAiBJ,GAEpCI,aAAgB,WACZ,IAAMI,EAAYC,SAASC,eAAe,iBAI1C,OAHIF,IACAA,EAAUG,MAAMC,MAAhB,UAA4BV,EAA5B,MAEG,WACHW,cAAcC,GACdP,EAAWZ,YAAa,MAGhC,IAAMmB,EAAWC,aAAY,WACrBb,GAAS,KAAOK,EAAWZ,aAC3BkB,cAAcC,GACdR,GAAYD,GACZE,EAAWZ,YAAa,GAE5BO,GAAgB,KACjB,KACH,OAAOK,EAAWZ,WAEV,cAAC,IAAD,CACIqB,OAAQ,EACRC,EAAG,OACHC,QAAS,OACTC,IAAK,QACLC,IAAK,EACLC,KAAM,EANV,SAQI,cAAC,IAAD,CACIC,GAAG,gBACHJ,QAAS,QACTF,OAAQ,OACRO,WAAY,kBAAmBC,cAAY,oBAIrD,MCjCKC,EAPI,SAAC,GAA6D,IACvEC,EADsE,EAA1DC,gBAKlB,OAHmBvB,aAAiBJ,GACzBL,YAAa,EAEjB,cAAC,WAAD,CAAgBiC,SAAU,cAAC,EAAD,IAA1B,SAAqD,cAACF,EAAD,OCVnDG,EAAY,SAAC,GAAsG,IAAD,IAAnGC,qBAAmG,MAAnF1B,QAAW,kBAAM,iCAAkE,EAC3H,OACI,cAAC,IAAD,CACI2B,UAAW,aACXC,KAAM,QACNC,KAAM,OACNhB,EAAG,OACHiB,WAAW,SACXC,eAAgB,SANpB,SAQI,cAAC,EAAD,CAAYR,gBAAiBG,O,gBCZ5BM,EAAeC,YAAY,CACpCC,MAAO,CACHC,KAAM,uBACNC,QAAS,6BAEbC,OAAQ,CACJC,iBAAkB,OAClBC,oBAAoB,K,OCebC,MAff,WACE,OAAQ,cAAC5C,EAAW6C,SAAZ,CAAqB3C,MAAOR,EAA5B,SACN,cAAC,IAAD,CAAgBoD,MAAOV,EAAvB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAWlB,cAAe1B,QAAW,kBAAM,qCAE7C,cAAC,IAAD,CAAO4C,KAAK,IAAZ,SACE,cAAC,EAAD,CAAWlB,cAAe1B,QAAW,kBAAM,mECHtC6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCAdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,IAAD,CAAiBlB,iBAAkBN,EAAaK,OAAOC,mBACvD,cAAC,IAAD,UACE,cAAC,EAAD,SAGJjC,SAASC,eAAe,SAM1BuC,M","file":"static/js/main.f6a5f9a9.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const AppContextDefaultValue = {\r\n    showLoader: false,\r\n    loaderAnimationCompleted: false,\r\n    headerBreadCrumbs: new Map(),\r\n    count: 0,\r\n};\r\nexport const AppContext = createContext(AppContextDefaultValue);","import { Box } from '@chakra-ui/react';\r\nimport * as React from \"react\";\r\nimport { AppContext } from '../../context/AppContext';\r\n\r\nexport type LoaderTypes = {\r\n    percentage: Number;\r\n};\r\n\r\nlet value = 0;\r\nexport const HeaderLoaderAnimation = (): React.ReactElement<LoaderTypes> | null => {\r\n    const [loading, setLoading] = React.useState(true);\r\n    const appContext = React.useContext(AppContext);\r\n\r\n    React.useEffect(() => {\r\n        const loaderBox = document.getElementById('loader-slider');\r\n        if (loaderBox) {\r\n            loaderBox.style.width = `${ value }%`;\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n            appContext.showLoader = false;\r\n        };\r\n    });\r\n    const interval = setInterval(() => {\r\n        if (value >= 100 && appContext.showLoader) {\r\n            clearInterval(interval);\r\n            setLoading(!loading);\r\n            appContext.showLoader = false;\r\n        }\r\n        value = value + 10;\r\n    }, 100);\r\n    return appContext.showLoader\r\n        ? (\r\n            <Box\r\n                height={4}\r\n                w={'100%'}\r\n                bgColor={'cyan'}\r\n                pos={'fixed'}\r\n                top={0}\r\n                left={0}\r\n            >\r\n                <Box\r\n                    id=\"loader-slider\"\r\n                    bgColor={'black'}\r\n                    height={'100%'}\r\n                    transition={'width 0.1s ease'} data-testid=\"loader-slider\"\r\n                />\r\n            </Box>\r\n        )\r\n        : null;\r\n};","import * as React from 'react';\r\nimport { AppContext } from '../../context/AppContext';\r\nimport { HeaderLoaderAnimation } from '../PageLoader/HeaderLoaderAnimation';\r\n\r\n\r\ntype MainLoaderType = {\r\n    componentToLoad: any;\r\n};\r\n\r\nconst MainLoader = ({ componentToLoad }: MainLoaderType): React.ReactElement => {\r\n    const MyApp = componentToLoad;\r\n    const appContext = React.useContext(AppContext);\r\n    appContext.showLoader = true;\r\n\r\n    return <React.Suspense fallback={<HeaderLoaderAnimation />}><MyApp /></React.Suspense>;\r\n};\r\nexport default MainLoader;","import * as React from \"react\";\r\nimport { Flex } from '@chakra-ui/react';\r\nimport MainLoader from '../components/MainLoader/MainLoader';\r\n\r\nexport const AppLoader = ({ reactLazyLoad = React.lazy(() => import(/* webpackChunkName: \"page-home\" */'../Pages/Home')) }) => {\r\n    return (\r\n        <Flex\r\n            className={'app-loader'}\r\n            minH={'100vh'}\r\n            maxW={'100%'}\r\n            w={'100%'}\r\n            alignItems=\"center\"\r\n            justifyContent={'center'}\r\n        >\r\n            <MainLoader componentToLoad={reactLazyLoad} />\r\n        </Flex>\r\n    );\r\n};","import { extendTheme } from \"@chakra-ui/react\";\r\n\r\nexport const defaultTheme = extendTheme({\r\n    fonts: {\r\n        body: \"'Roboto Slab', serif\",\r\n        heading: \"'Dancing Script', cursive\",\r\n    },\r\n    config: {\r\n        initialColorMode: \"dark\",\r\n        useSystemColorMode: true,\r\n    }\r\n});","// font-family: 'Dancing Script', cursive;\n// font-family: 'Roboto Slab', serif;\nimport * as  React from 'react';\nimport { AppLoader } from './Pages/AppLoader';\nimport { AppContext, AppContextDefaultValue } from \"./context/AppContext\";\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { defaultTheme } from './theme/defaultTheme';\nimport { Route, Switch } from 'react-router-dom';\n\nfunction App () {\n  return (<AppContext.Provider value={AppContextDefaultValue}>\n    <ChakraProvider theme={defaultTheme}>\n      <Switch>\n        <Route exact path=\"/\">\n          <AppLoader reactLazyLoad={React.lazy(() => import(/* webpackChunkName: \"page-home\" */'./Pages/Home'))}></AppLoader>\n        </Route>\n        <Route path=\"*\">\n          <AppLoader reactLazyLoad={React.lazy(() => import(/* webpackChunkName: \"page-notfound\" */'./Pages/NotFound'))}></AppLoader>\n        </Route>\n      </Switch>\n    </ChakraProvider>\n  </AppContext.Provider >);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { defaultTheme } from \"./theme/defaultTheme\";\nimport { ColorModeScript } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={defaultTheme.config.initialColorMode} />\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}